// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64
// +build 386 amd64

package user

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type bpfGcevent struct {
	Time  uint64
	Event uint32
	_     [4]byte
}

type bpfGorevent struct {
	Fn    uint64
	Time  uint64
	Event uint32
	Pid   uint32
	Goid  int64
}

// loadBpf returns the embedded CollectionSpec for bpf.
func loadBpf() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_BpfBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load bpf: %w", err)
	}

	return spec, err
}

// loadBpfObjects loads bpf and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//     *bpfObjects
//     *bpfPrograms
//     *bpfMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadBpfObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadBpf()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// bpfSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bpfSpecs struct {
	bpfProgramSpecs
	bpfMapSpecs
}

// bpfSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bpfProgramSpecs struct {
	UprobeRuntimeExecute               *ebpf.ProgramSpec `ebpf:"uprobe_runtime_execute"`
	UprobeRuntimeGcMarkDone            *ebpf.ProgramSpec `ebpf:"uprobe_runtime_gcMarkDone"`
	UprobeRuntimeGcStart               *ebpf.ProgramSpec `ebpf:"uprobe_runtime_gcStart"`
	UprobeRuntimeGcsweep               *ebpf.ProgramSpec `ebpf:"uprobe_runtime_gcsweep"`
	UprobeRuntimeGlobrunqget           *ebpf.ProgramSpec `ebpf:"uprobe_runtime_globrunqget"`
	UprobeRuntimeGoexit0               *ebpf.ProgramSpec `ebpf:"uprobe_runtime_goexit0"`
	UprobeRuntimeGoexit1               *ebpf.ProgramSpec `ebpf:"uprobe_runtime_goexit1"`
	UprobeRuntimeMallocgc              *ebpf.ProgramSpec `ebpf:"uprobe_runtime_mallocgc"`
	UprobeRuntimeNewproc1              *ebpf.ProgramSpec `ebpf:"uprobe_runtime_newproc1"`
	UprobeRuntimeRunqputslow           *ebpf.ProgramSpec `ebpf:"uprobe_runtime_runqputslow"`
	UprobeRuntimeRunqsteal             *ebpf.ProgramSpec `ebpf:"uprobe_runtime_runqsteal"`
	UprobeRuntimeStartTheWorldWithSema *ebpf.ProgramSpec `ebpf:"uprobe_runtime_startTheWorldWithSema"`
	UprobeRuntimeStopTheWorldWithSema  *ebpf.ProgramSpec `ebpf:"uprobe_runtime_stopTheWorldWithSema"`
}

// bpfMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bpfMapSpecs struct {
	Events    *ebpf.MapSpec `ebpf:"events"`
	GcTimeMap *ebpf.MapSpec `ebpf:"gc_time_map"`
	GmHistMap *ebpf.MapSpec `ebpf:"gm_hist_map"`
	GrTimeMap *ebpf.MapSpec `ebpf:"gr_time_map"`
	Heap      *ebpf.MapSpec `ebpf:"heap"`
	Heap1     *ebpf.MapSpec `ebpf:"heap1"`
	MemMap    *ebpf.MapSpec `ebpf:"mem_map"`
	UprobeMap *ebpf.MapSpec `ebpf:"uprobe_map"`
}

// bpfObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type bpfObjects struct {
	bpfPrograms
	bpfMaps
}

func (o *bpfObjects) Close() error {
	return _BpfClose(
		&o.bpfPrograms,
		&o.bpfMaps,
	)
}

// bpfMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type bpfMaps struct {
	Events    *ebpf.Map `ebpf:"events"`
	GcTimeMap *ebpf.Map `ebpf:"gc_time_map"`
	GmHistMap *ebpf.Map `ebpf:"gm_hist_map"`
	GrTimeMap *ebpf.Map `ebpf:"gr_time_map"`
	Heap      *ebpf.Map `ebpf:"heap"`
	Heap1     *ebpf.Map `ebpf:"heap1"`
	MemMap    *ebpf.Map `ebpf:"mem_map"`
	UprobeMap *ebpf.Map `ebpf:"uprobe_map"`
}

func (m *bpfMaps) Close() error {
	return _BpfClose(
		m.Events,
		m.GcTimeMap,
		m.GmHistMap,
		m.GrTimeMap,
		m.Heap,
		m.Heap1,
		m.MemMap,
		m.UprobeMap,
	)
}

// bpfPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type bpfPrograms struct {
	UprobeRuntimeExecute               *ebpf.Program `ebpf:"uprobe_runtime_execute"`
	UprobeRuntimeGcMarkDone            *ebpf.Program `ebpf:"uprobe_runtime_gcMarkDone"`
	UprobeRuntimeGcStart               *ebpf.Program `ebpf:"uprobe_runtime_gcStart"`
	UprobeRuntimeGcsweep               *ebpf.Program `ebpf:"uprobe_runtime_gcsweep"`
	UprobeRuntimeGlobrunqget           *ebpf.Program `ebpf:"uprobe_runtime_globrunqget"`
	UprobeRuntimeGoexit0               *ebpf.Program `ebpf:"uprobe_runtime_goexit0"`
	UprobeRuntimeGoexit1               *ebpf.Program `ebpf:"uprobe_runtime_goexit1"`
	UprobeRuntimeMallocgc              *ebpf.Program `ebpf:"uprobe_runtime_mallocgc"`
	UprobeRuntimeNewproc1              *ebpf.Program `ebpf:"uprobe_runtime_newproc1"`
	UprobeRuntimeRunqputslow           *ebpf.Program `ebpf:"uprobe_runtime_runqputslow"`
	UprobeRuntimeRunqsteal             *ebpf.Program `ebpf:"uprobe_runtime_runqsteal"`
	UprobeRuntimeStartTheWorldWithSema *ebpf.Program `ebpf:"uprobe_runtime_startTheWorldWithSema"`
	UprobeRuntimeStopTheWorldWithSema  *ebpf.Program `ebpf:"uprobe_runtime_stopTheWorldWithSema"`
}

func (p *bpfPrograms) Close() error {
	return _BpfClose(
		p.UprobeRuntimeExecute,
		p.UprobeRuntimeGcMarkDone,
		p.UprobeRuntimeGcStart,
		p.UprobeRuntimeGcsweep,
		p.UprobeRuntimeGlobrunqget,
		p.UprobeRuntimeGoexit0,
		p.UprobeRuntimeGoexit1,
		p.UprobeRuntimeMallocgc,
		p.UprobeRuntimeNewproc1,
		p.UprobeRuntimeRunqputslow,
		p.UprobeRuntimeRunqsteal,
		p.UprobeRuntimeStartTheWorldWithSema,
		p.UprobeRuntimeStopTheWorldWithSema,
	)
}

func _BpfClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//go:embed bpf_bpfel_x86.o
var _BpfBytes []byte
